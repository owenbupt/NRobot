TODO
    check AWGV partitioning
    Jn functions are wrong
        jacobians
            they are zero for some reason
        normals
            normals of j need a minus in x coordinate
            removed the minus in from of aj in Hji creation
            when plotting make sure to use the same vertices used to calculate the normals
    fix header file logic
    MA
        add dynamics member?
    add error handling function to make code cleaner (return appropriate error message)
    can NRPlot functions fail? (and plot functions in general)
    Finish MAs constructors (add default vector values)
    fix partitioning for coincident seeds?
    test NRCLip scaling
    Finish in/on functions in NBase
    Consistently comment every function
    Change code style in function declarations-definitions (one argument per line)
	add testing executables (and automated tests?)
    in Jn.cpp replace cos() with std::cos() etc. to avoid using namespace std

Improve functions
	double n::area( const Polygon& P )
		How does it handle non-simple polygons? (check clipper)
	n::Point n::centroid( const n::Polygon& P )
        make it work for polygons with multiple contours
            (add centroids of external and subtract centroids of internal contours?)
		How does it handle non-simple polygons?
    bool nr::in( const nr::Point& A, const nr::Polygon& P )
        make it work for polygons with multiple contours
	void nr::ys_partitioning()
        return neighbor relationships
    void nr::print( const nr::MA& agent, const bool verbose )
        more readable output when verbose is set
    nr::Polygon nr_hyperbola_branch()
        add cases for ray and plane minus ray cells
        why is BA = -BA; needed when a < 0?

Optimizations
    nr::Polygon::Polygon( const nr::Circle& C, size_t points_per_circle )
        make contour CW on setup (do not use reverse_order)
    double n::diameter( const Polygon& P )
		use convex hull to reduce complexity in non-convex polygons

--------------------------------------------------------------------------------

Structure
    NRobot (various robot classes and control laws) [NBase, NPart]
    NPart (Partitioning algorithms) [NBase, Clipper]
    NPlot (Visualization and plotting) [NBase, SDL]
    NBase (Basic geometric classes: point, contour, polygon etc.)

Code Guidelines
	Classes
		classes contain ONLY public data members and constructors/destructors
		all other functionality is implemented as non-member functions
	Functions
		Functions that might fail MUST return an int indicating exit status
		Input arguments are either const references or values for PODs
		Output arguments are pointers

Code Style
    Functions
        type function(
            argument1,
            argument2
        ) {
            code
        }

Other
    The last vertex of a polygon contour must NOT be the same as the first. This is what
        the open flag is for.
